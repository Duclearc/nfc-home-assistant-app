/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: dashboard.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace dashboard {
    export class Dashboard extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            url_base?: string;
            api_key?: string;
            items?: DashboardItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("url_base" in data && data.url_base != undefined) {
                    this.url_base = data.url_base;
                }
                if ("api_key" in data && data.api_key != undefined) {
                    this.api_key = data.api_key;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url_base() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url_base(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get api_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set api_key(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, DashboardItem, 4) as DashboardItem[];
        }
        set items(value: DashboardItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            url_base?: string;
            api_key?: string;
            items?: ReturnType<typeof DashboardItem.prototype.toObject>[];
        }): Dashboard {
            const message = new Dashboard({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.url_base != null) {
                message.url_base = data.url_base;
            }
            if (data.api_key != null) {
                message.api_key = data.api_key;
            }
            if (data.items != null) {
                message.items = data.items.map(item => DashboardItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                url_base?: string;
                api_key?: string;
                items?: ReturnType<typeof DashboardItem.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.url_base != null) {
                data.url_base = this.url_base;
            }
            if (this.api_key != null) {
                data.api_key = this.api_key;
            }
            if (this.items != null) {
                data.items = this.items.map((item: DashboardItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.url_base.length)
                writer.writeString(2, this.url_base);
            if (this.api_key.length)
                writer.writeString(3, this.api_key);
            if (this.items.length)
                writer.writeRepeatedMessage(4, this.items, (item: DashboardItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Dashboard {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Dashboard();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.url_base = reader.readString();
                        break;
                    case 3:
                        message.api_key = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 4, DashboardItem.deserialize(reader), DashboardItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Dashboard {
            return Dashboard.deserialize(bytes);
        }
    }
    export class DashboardItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            automation_path?: string;
            icon?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("automation_path" in data && data.automation_path != undefined) {
                    this.automation_path = data.automation_path;
                }
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get automation_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set automation_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get icon() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set icon(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            automation_path?: string;
            icon?: string;
        }): DashboardItem {
            const message = new DashboardItem({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.automation_path != null) {
                message.automation_path = data.automation_path;
            }
            if (data.icon != null) {
                message.icon = data.icon;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                automation_path?: string;
                icon?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.automation_path != null) {
                data.automation_path = this.automation_path;
            }
            if (this.icon != null) {
                data.icon = this.icon;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.automation_path.length)
                writer.writeString(2, this.automation_path);
            if (this.icon.length)
                writer.writeString(3, this.icon);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DashboardItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DashboardItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.automation_path = reader.readString();
                        break;
                    case 3:
                        message.icon = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DashboardItem {
            return DashboardItem.deserialize(bytes);
        }
    }
}
